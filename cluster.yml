---
- hosts: all
  remote_user: root

  tasks:
    - name: Ensure interfaces are present
      assert:
        that:
          - management_nic in ansible_facts.interfaces
          - data_nic in ansible_facts.interfaces

    - name: Enable docker repo
      get_url:
        url: "https://download.docker.com/linux/rhel/docker-ce.repo"
        dest: /etc/yum.repos.d

    - name: Ensure required and useful packages are present
      package:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
          - python3-requests
          - tmux
          - git
        state: present

    - name: Ensure docker daemon is running
      systemd_service:
        name: docker
        state: started
        enabled: yes
        daemon-reload: yes

    - name: Ensure docker is authenticated
      docker_login:
        username: "{{ docker_user }}"
        password: "{{ docker_password }}"

    - name: Check docker configuration existence
      stat: path=/etc/docker/daemon.json
      register: docker_daemon_config_stat

    - name: Read docker configuration
      slurp:
        src: /etc/docker/daemon.json
      register: docker_daemon_config
      when: docker_daemon_config_stat.stat.exists

    - name: Add mirror proxy to docker config
      copy:
        dest: /etc/docker/daemon.json
        content: "{{ docker_daemon_config['content'] | default('{}' | b64encode) | b64decode | from_json | combine({'registry-mirrors': ['http://34.32.73.43:5000']}) | to_nice_json }}"

    - name: Ensure sbcli is present and up-to-date
      pip:
        name: "{{ sbcli_package | default('sbcli-dev') }}"
        state: "{{ 'forcereinstall' if (sbcli_package | default('sbcli-dev')) is url else 'latest' }}"

    - name: Read sbcli details
      read_csv:
        path: '/usr/local/lib/python3.9/site-packages/simplyblock_core/env_var'
        fieldnames: ['key', 'value']
        delimiter: '='
      register: sbcli_details

    - name: Determine sbcli command
      set_fact:
        sbcli: "{{ (sbcli_details.list | selectattr('key', 'equalto', 'SIMPLY_BLOCK_COMMAND_NAME') | list | first).value | default('') }}"

    - name: Override sbcli image
      ini_file:
        path: '/usr/local/lib/python3.9/site-packages/simplyblock_core/env_var'
        option: 'SIMPLY_BLOCK_DOCKER_IMAGE'
        value: "{{ sb_image }}"
      when: sb_image is defined

    - name: Override ultra image
      ini_file:
        path: '/usr/local/lib/python3.9/site-packages/simplyblock_core/env_var'
        option: 'SIMPLY_BLOCK_SPDK_ULTRA_IMAGE'
        value: "{{ ultra_image }}"
      when: ultra_image is defined

    - name: Clean previous install
      command: "{{ sbcli }} sn deploy-cleaner"


- hosts: storage_nodes
  remote_user: root

  tasks:
    - name: Deploy storage node
      command: "{{ sbcli }} sn deploy --ifname {{ management_nic }}"


- hosts: management_node
  remote_user: root
  vars:
    high_availability: "{{ (groups['storage_nodes'] | length) > 1 }}"

  tasks:
    - name: Create cluster
      command: "{{ sbcli }} --dev cluster create --ha-type {{ 'ha' if high_availability else 'single' }} --data-chunks-per-stripe 1 --parity-chunks-per-stripe 1 --ifname {{ management_nic }}"
      register: cluster_creation

    - name: Store Cluster ID
      set_fact:
        cluster_id: "{{ cluster_creation.stdout.splitlines()[-1] }}"
      delegate_to: "{{ item }}"
      delegate_facts: true
      loop: ["{{ inventory_hostname }}", "localhost"]

    - name: Add storage nodes
      command: "{{ sbcli }} --dev storage-node add-node --max-lvol=50 --max-size=100G --number-of-devices=3 --journal-partition=0 --ssd-pcie 0000:00:02.0 0000:00:03.0 0000:00:04.0 0000:00:05.0 --number-of-distribs=4 {{ cluster_id }} {{ item }}:5000 {{ management_nic }} --data-nics={{ data_nic }}"
      loop: "{{ groups['storage_nodes'] }}"

    - name: Activate cluster
      command: "{{ sbcli }} cluster activate {{ cluster_id }}"

    - name: Create storage pool
      command: "{{ sbcli }} pool add {{ pool }} {{ cluster_id }}"
      when: pool is defined

    - name: Query cluster secret
      command: "{{ sbcli }} cluster get {{ cluster_id }}"
      register: cluster_details

    - name: Parse cluster secret
      set_fact:
        cluster_secret: "{{ (cluster_details.stdout | from_json)['secret'] }}"
      delegate_to: "{{ item }}"
      delegate_facts: true
      loop: ["{{ inventory_hostname }}", "localhost"]

    - name: Print cluster information
      debug:
        msg: "{{ cluster_id }} {{ cluster_secret }}"

...
